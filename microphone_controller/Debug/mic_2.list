
mic_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a80  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003c08  08003c08  00004c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c48  08003c48  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003c48  08003c48  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003c48  08003c48  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c48  08003c48  00004c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c4c  08003c4c  00004c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c50  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001174  2000000c  08003c5c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001180  08003c5c  00005180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1cd  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fea  00000000  00000000  00013209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  000151f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b99  00000000  00000000  000160f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256b0  00000000  00000000  00016c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe0c  00000000  00000000  0003c341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaec7  00000000  00000000  0004c14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137014  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f30  00000000  00000000  00137058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0013af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bf0 	.word	0x08003bf0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003bf0 	.word	0x08003bf0

080001c8 <send_signal>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void send_signal(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	int status = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80001ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001d2:	4811      	ldr	r0, [pc, #68]	@ (8000218 <send_signal+0x50>)
 80001d4:	f001 fcf2 	bl	8001bbc <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	607b      	str	r3, [r7, #4]
	if (status == 0){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d115      	bne.n	800020e <send_signal+0x46>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001e8:	480b      	ldr	r0, [pc, #44]	@ (8000218 <send_signal+0x50>)
 80001ea:	f001 fcff 	bl	8001bec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_AUTORELOAD(&htim3, 10000);
 80001ee:	4b0b      	ldr	r3, [pc, #44]	@ (800021c <send_signal+0x54>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80001f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80001f8:	4b08      	ldr	r3, [pc, #32]	@ (800021c <send_signal+0x54>)
 80001fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80001fe:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <send_signal+0x54>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2200      	movs	r2, #0
 8000206:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 8000208:	4804      	ldr	r0, [pc, #16]	@ (800021c <send_signal+0x54>)
 800020a:	f003 f847 	bl	800329c <HAL_TIM_Base_Start_IT>
	}
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	48000400 	.word	0x48000400
 800021c:	200000fc 	.word	0x200000fc

08000220 <process_audio>:

/*
 * This function takes in the pcm values and compares them to the previous values to determine if a spike in the
 * readings has occured.
 */
void process_audio(int32_t * pcm_buffer) {
 8000220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000224:	b088      	sub	sp, #32
 8000226:	af00      	add	r7, sp, #0
 8000228:	6078      	str	r0, [r7, #4]
	int64_t sum = 0;
 800022a:	f04f 0200 	mov.w	r2, #0
 800022e:	f04f 0300 	mov.w	r3, #0
 8000232:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int send_one = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < BUFFER_LEN/2; i++){
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	e023      	b.n	8000288 <process_audio+0x68>
		int32_t val = (pcm_buffer[i] >> 8);
 8000240:	693b      	ldr	r3, [r7, #16]
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	4413      	add	r3, r2
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	121b      	asrs	r3, r3, #8
 800024c:	60fb      	str	r3, [r7, #12]
		//80000 is chosen based on testing since there will always be some variance.
		// We could also calculate variance but that would take a lot longer.
		if (val - prev_mean > 80000 && send_one == 0){
 800024e:	4b1f      	ldr	r3, [pc, #124]	@ (80002cc <process_audio+0xac>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	4a1e      	ldr	r2, [pc, #120]	@ (80002d0 <process_audio+0xb0>)
 8000258:	4293      	cmp	r3, r2
 800025a:	dd06      	ble.n	800026a <process_audio+0x4a>
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d103      	bne.n	800026a <process_audio+0x4a>
			send_one = 1;
 8000262:	2301      	movs	r3, #1
 8000264:	617b      	str	r3, [r7, #20]
			send_signal(); // send a high signal to the controller.
 8000266:	f7ff ffaf 	bl	80001c8 <send_signal>
		}
		sum+=val;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	17da      	asrs	r2, r3, #31
 800026e:	461c      	mov	r4, r3
 8000270:	4615      	mov	r5, r2
 8000272:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000276:	eb12 0804 	adds.w	r8, r2, r4
 800027a:	eb43 0905 	adc.w	r9, r3, r5
 800027e:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (int i = 0; i < BUFFER_LEN/2; i++){
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	3301      	adds	r3, #1
 8000286:	613b      	str	r3, [r7, #16]
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800028e:	dbd7      	blt.n	8000240 <process_audio+0x20>
	}
	prev_mean = sum/(BUFFER_LEN/2);
 8000290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000294:	2b00      	cmp	r3, #0
 8000296:	da07      	bge.n	80002a8 <process_audio+0x88>
 8000298:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800029c:	eb12 0a01 	adds.w	sl, r2, r1
 80002a0:	f143 0b00 	adc.w	fp, r3, #0
 80002a4:	4652      	mov	r2, sl
 80002a6:	465b      	mov	r3, fp
 80002a8:	f04f 0000 	mov.w	r0, #0
 80002ac:	f04f 0100 	mov.w	r1, #0
 80002b0:	0a50      	lsrs	r0, r2, #9
 80002b2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80002b6:	1259      	asrs	r1, r3, #9
 80002b8:	4602      	mov	r2, r0
 80002ba:	460b      	mov	r3, r1
 80002bc:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <process_audio+0xac>)
 80002be:	601a      	str	r2, [r3, #0]
}
 80002c0:	bf00      	nop
 80002c2:	3720      	adds	r7, #32
 80002c4:	46bd      	mov	sp, r7
 80002c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80002ca:	bf00      	nop
 80002cc:	20001148 	.word	0x20001148
 80002d0:	00013880 	.word	0x00013880

080002d4 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80002d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80002d8:	b086      	sub	sp, #24
 80002da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002dc:	f000 fc09 	bl	8000af2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002e0:	f000 f87a 	bl	80003d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002e4:	f000 f99e 	bl	8000624 <MX_GPIO_Init>
	MX_DMA_Init();
 80002e8:	f000 f97e 	bl	80005e8 <MX_DMA_Init>
	MX_DFSDM1_Init();
 80002ec:	f000 f8c6 	bl	800047c <MX_DFSDM1_Init>
	MX_TIM3_Init();
 80002f0:	f000 f92a 	bl	8000548 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	//This sets us up and starts reading from the DMA to a buffer.
	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, raw_pcm_buffer, BUFFER_LEN);
 80002f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80002f8:	4931      	ldr	r1, [pc, #196]	@ (80003c0 <main+0xec>)
 80002fa:	4832      	ldr	r0, [pc, #200]	@ (80003c4 <main+0xf0>)
 80002fc:	f000 ff60 	bl	80011c0 <HAL_DFSDM_FilterRegularStart_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int warmup = 0; // a warmup for the microphone in case of any funky data during the first couple of reads.
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
	while (1) {
		if (DmaRecHalfBuffCplt == 1){
 8000304:	4b30      	ldr	r3, [pc, #192]	@ (80003c8 <main+0xf4>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d10c      	bne.n	8000326 <main+0x52>
			if (warmup < 10){
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	2b09      	cmp	r3, #9
 8000310:	dc03      	bgt.n	800031a <main+0x46>
				warmup++; //skip this read
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	3301      	adds	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	e002      	b.n	8000320 <main+0x4c>
			}
			else{
				process_audio(&raw_pcm_buffer[0]);
 800031a:	4829      	ldr	r0, [pc, #164]	@ (80003c0 <main+0xec>)
 800031c:	f7ff ff80 	bl	8000220 <process_audio>
			}
			DmaRecHalfBuffCplt = 0;
 8000320:	4b29      	ldr	r3, [pc, #164]	@ (80003c8 <main+0xf4>)
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
		}
		if (DmaRecBuffCplt == 1){
 8000326:	4b29      	ldr	r3, [pc, #164]	@ (80003cc <main+0xf8>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d1ea      	bne.n	8000304 <main+0x30>
			if (warmup < 10){
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	2b09      	cmp	r3, #9
 8000332:	dc3e      	bgt.n	80003b2 <main+0xde>
			//right before we start reading for real, we want a previous baseline mean to compare spikes to
				if (warmup == 9){
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	2b09      	cmp	r3, #9
 8000338:	d137      	bne.n	80003aa <main+0xd6>
					int64_t sum = 0;
 800033a:	f04f 0200 	mov.w	r2, #0
 800033e:	f04f 0300 	mov.w	r3, #0
 8000342:	e9c7 2302 	strd	r2, r3, [r7, #8]
					for (int i = 0; i < BUFFER_LEN; i++){
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	e012      	b.n	8000372 <main+0x9e>
						sum+=raw_pcm_buffer[i] >> 8;
 800034c:	4a1c      	ldr	r2, [pc, #112]	@ (80003c0 <main+0xec>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000354:	121b      	asrs	r3, r3, #8
 8000356:	17da      	asrs	r2, r3, #31
 8000358:	461c      	mov	r4, r3
 800035a:	4615      	mov	r5, r2
 800035c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000360:	eb12 0804 	adds.w	r8, r2, r4
 8000364:	eb43 0905 	adc.w	r9, r3, r5
 8000368:	e9c7 8902 	strd	r8, r9, [r7, #8]
					for (int i = 0; i < BUFFER_LEN; i++){
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3301      	adds	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000378:	dbe8      	blt.n	800034c <main+0x78>
					}
					prev_mean = sum/BUFFER_LEN;
 800037a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800037e:	2b00      	cmp	r3, #0
 8000380:	da07      	bge.n	8000392 <main+0xbe>
 8000382:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000386:	eb12 0a01 	adds.w	sl, r2, r1
 800038a:	f143 0b00 	adc.w	fp, r3, #0
 800038e:	4652      	mov	r2, sl
 8000390:	465b      	mov	r3, fp
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	f04f 0100 	mov.w	r1, #0
 800039a:	0a90      	lsrs	r0, r2, #10
 800039c:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 80003a0:	1299      	asrs	r1, r3, #10
 80003a2:	4602      	mov	r2, r0
 80003a4:	460b      	mov	r3, r1
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <main+0xfc>)
 80003a8:	601a      	str	r2, [r3, #0]
				}
				warmup++; //skip this read
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	3301      	adds	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	e002      	b.n	80003b8 <main+0xe4>
			}
			else{
				process_audio(&raw_pcm_buffer[BUFFER_LEN/2]);
 80003b2:	4808      	ldr	r0, [pc, #32]	@ (80003d4 <main+0x100>)
 80003b4:	f7ff ff34 	bl	8000220 <process_audio>
			}
			DmaRecBuffCplt = 0;
 80003b8:	4b04      	ldr	r3, [pc, #16]	@ (80003cc <main+0xf8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
		if (DmaRecHalfBuffCplt == 1){
 80003be:	e7a1      	b.n	8000304 <main+0x30>
 80003c0:	20000148 	.word	0x20000148
 80003c4:	20000028 	.word	0x20000028
 80003c8:	2000114c 	.word	0x2000114c
 80003cc:	2000114d 	.word	0x2000114d
 80003d0:	20001148 	.word	0x20001148
 80003d4:	20000948 	.word	0x20000948

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b096      	sub	sp, #88	@ 0x58
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	2244      	movs	r2, #68	@ 0x44
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f003 fbd6 	bl	8003b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	463b      	mov	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003fe:	f001 fc1b 	bl	8001c38 <HAL_PWREx_ControlVoltageScaling>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000408:	f000 f988 	bl	800071c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800040c:	2310      	movs	r3, #16
 800040e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000410:	2301      	movs	r3, #1
 8000412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000418:	2360      	movs	r3, #96	@ 0x60
 800041a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	2302      	movs	r3, #2
 800041e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000420:	2301      	movs	r3, #1
 8000422:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000424:	2301      	movs	r3, #1
 8000426:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000428:	2328      	movs	r3, #40	@ 0x28
 800042a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800042c:	2307      	movs	r3, #7
 800042e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000430:	2302      	movs	r3, #2
 8000432:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000434:	2302      	movs	r3, #2
 8000436:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	4618      	mov	r0, r3
 800043e:	f001 fc51 	bl	8001ce4 <HAL_RCC_OscConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000448:	f000 f968 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044c:	230f      	movs	r3, #15
 800044e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000450:	2303      	movs	r3, #3
 8000452:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000460:	463b      	mov	r3, r7
 8000462:	2104      	movs	r1, #4
 8000464:	4618      	mov	r0, r3
 8000466:	f002 f819 	bl	800249c <HAL_RCC_ClockConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000470:	f000 f954 	bl	800071c <Error_Handler>
  }
}
 8000474:	bf00      	nop
 8000476:	3758      	adds	r7, #88	@ 0x58
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000480:	4b2c      	ldr	r3, [pc, #176]	@ (8000534 <MX_DFSDM1_Init+0xb8>)
 8000482:	4a2d      	ldr	r2, [pc, #180]	@ (8000538 <MX_DFSDM1_Init+0xbc>)
 8000484:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000486:	4b2b      	ldr	r3, [pc, #172]	@ (8000534 <MX_DFSDM1_Init+0xb8>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800048c:	4b29      	ldr	r3, [pc, #164]	@ (8000534 <MX_DFSDM1_Init+0xb8>)
 800048e:	2201      	movs	r2, #1
 8000490:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000492:	4b28      	ldr	r3, [pc, #160]	@ (8000534 <MX_DFSDM1_Init+0xb8>)
 8000494:	2201      	movs	r2, #1
 8000496:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000498:	4b26      	ldr	r3, [pc, #152]	@ (8000534 <MX_DFSDM1_Init+0xb8>)
 800049a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800049e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 250;
 80004a0:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <MX_DFSDM1_Init+0xb8>)
 80004a2:	22fa      	movs	r2, #250	@ 0xfa
 80004a4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80004a6:	4b23      	ldr	r3, [pc, #140]	@ (8000534 <MX_DFSDM1_Init+0xb8>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80004ac:	4821      	ldr	r0, [pc, #132]	@ (8000534 <MX_DFSDM1_Init+0xb8>)
 80004ae:	f000 fd67 	bl	8000f80 <HAL_DFSDM_FilterInit>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80004b8:	f000 f930 	bl	800071c <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80004bc:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004be:	4a20      	ldr	r2, [pc, #128]	@ (8000540 <MX_DFSDM1_Init+0xc4>)
 80004c0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80004c2:	4b1e      	ldr	r3, [pc, #120]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80004c8:	4b1c      	ldr	r3, [pc, #112]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 80004ce:	4b1b      	ldr	r3, [pc, #108]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004d0:	2228      	movs	r2, #40	@ 0x28
 80004d2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80004d4:	4b19      	ldr	r3, [pc, #100]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80004da:	4b18      	ldr	r3, [pc, #96]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004dc:	2200      	movs	r2, #0
 80004de:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80004e0:	4b16      	ldr	r3, [pc, #88]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80004ec:	4b13      	ldr	r3, [pc, #76]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004ee:	2204      	movs	r2, #4
 80004f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80004f2:	4b12      	ldr	r3, [pc, #72]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80004f8:	4b10      	ldr	r3, [pc, #64]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80004fe:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 8000500:	2200      	movs	r2, #0
 8000502:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000504:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 8000506:	2200      	movs	r2, #0
 8000508:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800050a:	480c      	ldr	r0, [pc, #48]	@ (800053c <MX_DFSDM1_Init+0xc0>)
 800050c:	f000 fc78 	bl	8000e00 <HAL_DFSDM_ChannelInit>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000516:	f000 f901 	bl	800071c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800051a:	2201      	movs	r2, #1
 800051c:	4909      	ldr	r1, [pc, #36]	@ (8000544 <MX_DFSDM1_Init+0xc8>)
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <MX_DFSDM1_Init+0xb8>)
 8000520:	f000 fe08 	bl	8001134 <HAL_DFSDM_FilterConfigRegChannel>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800052a:	f000 f8f7 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000028 	.word	0x20000028
 8000538:	40016100 	.word	0x40016100
 800053c:	2000007c 	.word	0x2000007c
 8000540:	40016040 	.word	0x40016040
 8000544:	00020004 	.word	0x00020004

08000548 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000566:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <MX_TIM3_Init+0x98>)
 8000568:	4a1e      	ldr	r2, [pc, #120]	@ (80005e4 <MX_TIM3_Init+0x9c>)
 800056a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800056c:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_TIM3_Init+0x98>)
 800056e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_TIM3_Init+0x98>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <MX_TIM3_Init+0x98>)
 800057c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000580:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000582:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <MX_TIM3_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000588:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <MX_TIM3_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800058e:	4814      	ldr	r0, [pc, #80]	@ (80005e0 <MX_TIM3_Init+0x98>)
 8000590:	f002 fe2c 	bl	80031ec <HAL_TIM_Base_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800059a:	f000 f8bf 	bl	800071c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <MX_TIM3_Init+0x98>)
 80005ac:	f003 f81c 	bl	80035e8 <HAL_TIM_ConfigClockSource>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80005b6:	f000 f8b1 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <MX_TIM3_Init+0x98>)
 80005c8:	f003 fa40 	bl	8003a4c <HAL_TIMEx_MasterConfigSynchronization>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80005d2:	f000 f8a3 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000fc 	.word	0x200000fc
 80005e4:	40000400 	.word	0x40000400

080005e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <MX_DMA_Init+0x38>)
 80005f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000620 <MX_DMA_Init+0x38>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005fa:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <MX_DMA_Init+0x38>)
 80005fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	200e      	movs	r0, #14
 800060c:	f000 fbc1 	bl	8000d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000610:	200e      	movs	r0, #14
 8000612:	f000 fbda 	bl	8000dca <HAL_NVIC_EnableIRQ>

}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_GPIO_Init+0x78>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a17      	ldr	r2, [pc, #92]	@ (800069c <MX_GPIO_Init+0x78>)
 8000640:	f043 0310 	orr.w	r3, r3, #16
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_GPIO_Init+0x78>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0310 	and.w	r3, r3, #16
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_GPIO_Init+0x78>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	4a11      	ldr	r2, [pc, #68]	@ (800069c <MX_GPIO_Init+0x78>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_GPIO_Init+0x78>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000670:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <MX_GPIO_Init+0x7c>)
 8000672:	f001 fabb 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000676:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0x7c>)
 8000690:	f001 f8ea 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	48000400 	.word	0x48000400

080006a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//call backs to let us know if the buffer was half full or fully full
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	DmaRecHalfBuffCplt=1;
 80006ac:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2000114c 	.word	0x2000114c

080006c4 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	DmaRecBuffCplt=1;
 80006cc:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	2000114d 	.word	0x2000114d

080006e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a07      	ldr	r2, [pc, #28]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d108      	bne.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fc:	4805      	ldr	r0, [pc, #20]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80006fe:	f001 fa75 	bl	8001bec <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&htim3);
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000704:	f002 fe3a 	bl	800337c <HAL_TIM_Base_Stop_IT>
	}
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40000400 	.word	0x40000400
 8000714:	48000400 	.word	0x48000400
 8000718:	200000fc 	.word	0x200000fc

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000732:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <HAL_MspInit+0x44>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6613      	str	r3, [r2, #96]	@ 0x60
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <HAL_MspInit+0x44>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_MspInit+0x44>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000750:	6593      	str	r3, [r2, #88]	@ 0x58
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_MspInit+0x44>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_DFSDM_FilterMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_filter: DFSDM_Filter handle pointer
  * @retval None
  */
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0ac      	sub	sp, #176	@ 0xb0
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2288      	movs	r2, #136	@ 0x88
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f003 fa01 	bl	8003b98 <memset>
  if(DFSDM1_Init == 0)
 8000796:	4b45      	ldr	r3, [pc, #276]	@ (80008ac <HAL_DFSDM_FilterMspInit+0x13c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d14b      	bne.n	8000836 <HAL_DFSDM_FilterMspInit+0xc6>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800079e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 f860 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80007ba:	f7ff ffaf 	bl	800071c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80007be:	4b3c      	ldr	r3, [pc, #240]	@ (80008b0 <HAL_DFSDM_FilterMspInit+0x140>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a3a      	ldr	r2, [pc, #232]	@ (80008b0 <HAL_DFSDM_FilterMspInit+0x140>)
 80007c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80007c8:	4b39      	ldr	r3, [pc, #228]	@ (80008b0 <HAL_DFSDM_FilterMspInit+0x140>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10b      	bne.n	80007e8 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80007d0:	4b38      	ldr	r3, [pc, #224]	@ (80008b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80007d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d4:	4a37      	ldr	r2, [pc, #220]	@ (80008b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80007d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007da:	6613      	str	r3, [r2, #96]	@ 0x60
 80007dc:	4b35      	ldr	r3, [pc, #212]	@ (80008b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80007de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e8:	4b32      	ldr	r3, [pc, #200]	@ (80008b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ec:	4a31      	ldr	r2, [pc, #196]	@ (80008b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80007ee:	f043 0310 	orr.w	r3, r3, #16
 80007f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f4:	4b2f      	ldr	r3, [pc, #188]	@ (80008b4 <HAL_DFSDM_FilterMspInit+0x144>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f8:	f003 0310 	and.w	r3, r3, #16
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000800:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800081a:	2306      	movs	r3, #6
 800081c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000820:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000824:	4619      	mov	r1, r3
 8000826:	4824      	ldr	r0, [pc, #144]	@ (80008b8 <HAL_DFSDM_FilterMspInit+0x148>)
 8000828:	f001 f81e 	bl	8001868 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <HAL_DFSDM_FilterMspInit+0x13c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	4a1e      	ldr	r2, [pc, #120]	@ (80008ac <HAL_DFSDM_FilterMspInit+0x13c>)
 8000834:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a20      	ldr	r2, [pc, #128]	@ (80008bc <HAL_DFSDM_FilterMspInit+0x14c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d130      	bne.n	80008a2 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000840:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000842:	4a20      	ldr	r2, [pc, #128]	@ (80008c4 <HAL_DFSDM_FilterMspInit+0x154>)
 8000844:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800084c:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000852:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000858:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800085a:	2280      	movs	r2, #128	@ 0x80
 800085c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800085e:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000864:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000866:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000868:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800086c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000870:	2220      	movs	r2, #32
 8000872:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800087a:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800087c:	f000 fdfc 	bl	8001478 <HAL_DMA_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8000886:	f7ff ff49 	bl	800071c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a0c      	ldr	r2, [pc, #48]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800088e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000890:	4a0b      	ldr	r2, [pc, #44]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a09      	ldr	r2, [pc, #36]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800089a:	629a      	str	r2, [r3, #40]	@ 0x28
 800089c:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_DFSDM_FilterMspInit+0x150>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 80008a2:	bf00      	nop
 80008a4:	37b0      	adds	r7, #176	@ 0xb0
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20001154 	.word	0x20001154
 80008b0:	20001150 	.word	0x20001150
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48001000 	.word	0x48001000
 80008bc:	40016100 	.word	0x40016100
 80008c0:	200000b4 	.word	0x200000b4
 80008c4:	40020044 	.word	0x40020044

080008c8 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b0ac      	sub	sp, #176	@ 0xb0
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2288      	movs	r2, #136	@ 0x88
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 f955 	bl	8003b98 <memset>
  if(DFSDM1_Init == 0)
 80008ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d14b      	bne.n	800098e <HAL_DFSDM_ChannelMspInit+0xc6>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80008f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4618      	mov	r0, r3
 8000908:	f001 ffb4 	bl	8002874 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000912:	f7ff ff03 	bl	800071c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <HAL_DFSDM_ChannelMspInit+0xd4>)
 800091e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000920:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10b      	bne.n	8000940 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000928:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800092a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092c:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800092e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000932:	6613      	str	r3, [r2, #96]	@ 0x60
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000944:	4a16      	ldr	r2, [pc, #88]	@ (80009a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000958:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800095c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000972:	2306      	movs	r3, #6
 8000974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000978:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800097c:	4619      	mov	r1, r3
 800097e:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8000980:	f000 ff72 	bl	8001868 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	4a03      	ldr	r2, [pc, #12]	@ (8000998 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800098c:	6013      	str	r3, [r2, #0]
  }

}
 800098e:	bf00      	nop
 8000990:	37b0      	adds	r7, #176	@ 0xb0
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20001154 	.word	0x20001154
 800099c:	20001150 	.word	0x20001150
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48001000 	.word	0x48001000

080009a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <HAL_TIM_Base_MspInit+0x44>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d113      	bne.n	80009e2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <HAL_TIM_Base_MspInit+0x48>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009be:	4a0c      	ldr	r2, [pc, #48]	@ (80009f0 <HAL_TIM_Base_MspInit+0x48>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_TIM_Base_MspInit+0x48>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	201d      	movs	r0, #29
 80009d8:	f000 f9db 	bl	8000d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009dc:	201d      	movs	r0, #29
 80009de:	f000 f9f4 	bl	8000dca <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40000400 	.word	0x40000400
 80009f0:	40021000 	.word	0x40021000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4a:	f000 f8a7 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <DMA1_Channel4_IRQHandler+0x10>)
 8000a5a:	f000 fe25 	bl	80016a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000b4 	.word	0x200000b4

08000a68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <TIM3_IRQHandler+0x10>)
 8000a6e:	f002 fcb4 	bl	80033da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000fc 	.word	0x200000fc

08000a7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa4:	f7ff ffea 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ace:	f003 f86b 	bl	8003ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad2:	f7ff fbff 	bl	80002d4 <main>

08000ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae4:	08003c50 	.word	0x08003c50
  ldr r2, =_sbss
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aec:	20001180 	.word	0x20001180

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>

08000af2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 f93d 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b02:	200f      	movs	r0, #15
 8000b04:	f000 f80e 	bl	8000b24 <HAL_InitTick>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d002      	beq.n	8000b14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	71fb      	strb	r3, [r7, #7]
 8000b12:	e001      	b.n	8000b18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b14:	f7ff fe08 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b30:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <HAL_InitTick+0x6c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d023      	beq.n	8000b80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b38:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <HAL_InitTick+0x70>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <HAL_InitTick+0x6c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f949 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10f      	bne.n	8000b7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d809      	bhi.n	8000b74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f913 	bl	8000d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_InitTick+0x74>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	e007      	b.n	8000b84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
 8000b78:	e004      	b.n	8000b84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	73fb      	strb	r3, [r7, #15]
 8000b7e:	e001      	b.n	8000b84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000004 	.word	0x20000004

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20001158 	.word	0x20001158

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20001158 	.word	0x20001158

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	@ (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	@ (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	@ (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	@ 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff29 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff3e 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff31 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffa2 	bl	8000d38 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e0ac      	b.n	8000f6c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fa8c 	bl	8001334 <DFSDM_GetChannelFromInstance>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4a55      	ldr	r2, [pc, #340]	@ (8000f74 <HAL_DFSDM_ChannelInit+0x174>)
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e09f      	b.n	8000f6c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fd4b 	bl	80008c8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000e32:	4b51      	ldr	r3, [pc, #324]	@ (8000f78 <HAL_DFSDM_ChannelInit+0x178>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a4f      	ldr	r2, [pc, #316]	@ (8000f78 <HAL_DFSDM_ChannelInit+0x178>)
 8000e3a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000e3c:	4b4e      	ldr	r3, [pc, #312]	@ (8000f78 <HAL_DFSDM_ChannelInit+0x178>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d125      	bne.n	8000e90 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000e44:	4b4d      	ldr	r3, [pc, #308]	@ (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a4c      	ldr	r2, [pc, #304]	@ (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000e4e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000e50:	4b4a      	ldr	r3, [pc, #296]	@ (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4948      	ldr	r1, [pc, #288]	@ (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000e5e:	4b47      	ldr	r3, [pc, #284]	@ (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a46      	ldr	r2, [pc, #280]	@ (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e64:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000e68:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d108      	bne.n	8000e84 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000e72:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	041b      	lsls	r3, r3, #16
 8000e7e:	493f      	ldr	r1, [pc, #252]	@ (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e80:	4313      	orrs	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000e84:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a3c      	ldr	r2, [pc, #240]	@ (8000f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8000e8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e8e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8000e9e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000eae:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000eb4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 020f 	bic.w	r2, r2, #15
 8000ecc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6819      	ldr	r1, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8000ef4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6899      	ldr	r1, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f04:	3b01      	subs	r3, #1
 8000f06:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f002 0207 	and.w	r2, r2, #7
 8000f20:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6859      	ldr	r1, [r3, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f4c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f9ea 	bl	8001334 <DFSDM_GetChannelFromInstance>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4904      	ldr	r1, [pc, #16]	@ (8000f74 <HAL_DFSDM_ChannelInit+0x174>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20001160 	.word	0x20001160
 8000f78:	2000115c 	.word	0x2000115c
 8000f7c:	40016000 	.word	0x40016000

08000f80 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e0ca      	b.n	8001128 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a66      	ldr	r2, [pc, #408]	@ (8001130 <HAL_DFSDM_FilterInit+0x1b0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d109      	bne.n	8000fb0 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d003      	beq.n	8000fac <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0bb      	b.n	8001128 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fbd1 	bl	8000770 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8000fdc:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7a1b      	ldrb	r3, [r3, #8]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d108      	bne.n	8000ff8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e007      	b.n	8001008 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001006:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7a5b      	ldrb	r3, [r3, #9]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d108      	bne.n	8001022 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e007      	b.n	8001032 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 8001040:	f023 0308 	bic.w	r3, r3, #8
 8001044:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d108      	bne.n	8001060 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695a      	ldr	r2, [r3, #20]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7c1b      	ldrb	r3, [r3, #16]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0210 	orr.w	r2, r2, #16
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e007      	b.n	800108a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0210 	bic.w	r2, r2, #16
 8001088:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7c5b      	ldrb	r3, [r3, #17]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0220 	orr.w	r2, r2, #32
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e007      	b.n	80010b4 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0220 	bic.w	r2, r2, #32
 80010b2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 80010c2:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80010c6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6959      	ldr	r1, [r3, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80010da:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80010e2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699a      	ldr	r2, [r3, #24]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7c1a      	ldrb	r2, [r3, #16]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40016100 	.word	0x40016100

08001134 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800114a:	2b00      	cmp	r3, #0
 800114c:	d02e      	beq.n	80011ac <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001154:	2bff      	cmp	r3, #255	@ 0xff
 8001156:	d029      	beq.n	80011ac <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d10d      	bne.n	800118e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001180:	431a      	orrs	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e00a      	b.n	80011a4 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6819      	ldr	r1, [r3, #0]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80011aa:	e001      	b.n	80011b0 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	75fb      	strb	r3, [r7, #23]
 80011e0:	e064      	b.n	80012ac <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80011f0:	d002      	beq.n	80011f8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	75fb      	strb	r3, [r7, #23]
 80011f6:	e059      	b.n	80012ac <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10e      	bne.n	800121e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10a      	bne.n	800121e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120c:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800120e:	2b00      	cmp	r3, #0
 8001210:	d105      	bne.n	800121e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d002      	beq.n	800121e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	75fb      	strb	r3, [r7, #23]
 800121c:	e046      	b.n	80012ac <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10b      	bne.n	800123e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001232:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001234:	2b20      	cmp	r3, #32
 8001236:	d102      	bne.n	800123e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	75fb      	strb	r3, [r7, #23]
 800123c:	e036      	b.n	80012ac <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001244:	2b01      	cmp	r3, #1
 8001246:	d004      	beq.n	8001252 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800124e:	2b03      	cmp	r3, #3
 8001250:	d12a      	bne.n	80012a8 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001256:	4a18      	ldr	r2, [pc, #96]	@ (80012b8 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001258:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125e:	4a17      	ldr	r2, [pc, #92]	@ (80012bc <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001260:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001266:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001268:	2b20      	cmp	r3, #32
 800126a:	d101      	bne.n	8001270 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800126e:	e000      	b.n	8001272 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001270:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001276:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	331c      	adds	r3, #28
 8001282:	4619      	mov	r1, r3
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f000 f9ae 	bl	80015e8 <HAL_DMA_Start_IT>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800129e:	e005      	b.n	80012ac <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f000 f893 	bl	80013cc <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80012a6:	e001      	b.n	80012ac <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	080012f5 	.word	0x080012f5
 80012bc:	08001311 	.word	0x08001311
 80012c0:	080012d9 	.word	0x080012d9

080012c4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff f9dc 	bl	80006a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001300:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff f9de 	bl	80006c4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2203      	movs	r2, #3
 8001322:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff ffcd 	bl	80012c4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a1c      	ldr	r2, [pc, #112]	@ (80013b0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d102      	bne.n	800134a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	e02b      	b.n	80013a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <DFSDM_GetChannelFromInstance+0x80>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d102      	bne.n	8001358 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	e024      	b.n	80013a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a17      	ldr	r2, [pc, #92]	@ (80013b8 <DFSDM_GetChannelFromInstance+0x84>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d102      	bne.n	8001366 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001360:	2302      	movs	r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e01d      	b.n	80013a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <DFSDM_GetChannelFromInstance+0x88>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d102      	bne.n	8001374 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800136e:	2304      	movs	r3, #4
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e016      	b.n	80013a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d102      	bne.n	8001382 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800137c:	2305      	movs	r3, #5
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e00f      	b.n	80013a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a0f      	ldr	r2, [pc, #60]	@ (80013c4 <DFSDM_GetChannelFromInstance+0x90>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d102      	bne.n	8001390 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800138a:	2306      	movs	r3, #6
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	e008      	b.n	80013a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <DFSDM_GetChannelFromInstance+0x94>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d102      	bne.n	800139e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001398:	2307      	movs	r3, #7
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e001      	b.n	80013a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800139e:	2303      	movs	r3, #3
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40016000 	.word	0x40016000
 80013b4:	40016020 	.word	0x40016020
 80013b8:	40016040 	.word	0x40016040
 80013bc:	40016080 	.word	0x40016080
 80013c0:	400160a0 	.word	0x400160a0
 80013c4:	400160c0 	.word	0x400160c0
 80013c8:	400160e0 	.word	0x400160e0

080013cc <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d108      	bne.n	80013ee <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e033      	b.n	8001456 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800140c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001424:	2b03      	cmp	r3, #3
 8001426:	d116      	bne.n	8001456 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800142c:	2b00      	cmp	r3, #0
 800142e:	d107      	bne.n	8001440 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0202 	orr.w	r2, r2, #2
 800143e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001446:	2b01      	cmp	r3, #1
 8001448:	d102      	bne.n	8001450 <DFSDM_RegConvStart+0x84>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	e000      	b.n	8001452 <DFSDM_RegConvStart+0x86>
 8001450:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <DFSDM_RegConvStart+0x98>
 8001460:	2202      	movs	r2, #2
 8001462:	e000      	b.n	8001466 <DFSDM_RegConvStart+0x9a>
 8001464:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e098      	b.n	80015bc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	4b4d      	ldr	r3, [pc, #308]	@ (80015c8 <HAL_DMA_Init+0x150>)
 8001492:	429a      	cmp	r2, r3
 8001494:	d80f      	bhi.n	80014b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b4b      	ldr	r3, [pc, #300]	@ (80015cc <HAL_DMA_Init+0x154>)
 800149e:	4413      	add	r3, r2
 80014a0:	4a4b      	ldr	r2, [pc, #300]	@ (80015d0 <HAL_DMA_Init+0x158>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	009a      	lsls	r2, r3, #2
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a48      	ldr	r2, [pc, #288]	@ (80015d4 <HAL_DMA_Init+0x15c>)
 80014b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80014b4:	e00e      	b.n	80014d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b46      	ldr	r3, [pc, #280]	@ (80015d8 <HAL_DMA_Init+0x160>)
 80014be:	4413      	add	r3, r2
 80014c0:	4a43      	ldr	r2, [pc, #268]	@ (80015d0 <HAL_DMA_Init+0x158>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	009a      	lsls	r2, r3, #2
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a42      	ldr	r2, [pc, #264]	@ (80015dc <HAL_DMA_Init+0x164>)
 80014d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80014ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800152e:	d039      	beq.n	80015a4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	4a27      	ldr	r2, [pc, #156]	@ (80015d4 <HAL_DMA_Init+0x15c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d11a      	bne.n	8001570 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <HAL_DMA_Init+0x168>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	f003 031c 	and.w	r3, r3, #28
 8001546:	210f      	movs	r1, #15
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	4924      	ldr	r1, [pc, #144]	@ (80015e0 <HAL_DMA_Init+0x168>)
 8001550:	4013      	ands	r3, r2
 8001552:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_DMA_Init+0x168>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001560:	f003 031c 	and.w	r3, r3, #28
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	491d      	ldr	r1, [pc, #116]	@ (80015e0 <HAL_DMA_Init+0x168>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
 800156e:	e019      	b.n	80015a4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001570:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <HAL_DMA_Init+0x16c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001578:	f003 031c 	and.w	r3, r3, #28
 800157c:	210f      	movs	r1, #15
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	4917      	ldr	r1, [pc, #92]	@ (80015e4 <HAL_DMA_Init+0x16c>)
 8001586:	4013      	ands	r3, r2
 8001588:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_DMA_Init+0x16c>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6859      	ldr	r1, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	f003 031c 	and.w	r3, r3, #28
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	4911      	ldr	r1, [pc, #68]	@ (80015e4 <HAL_DMA_Init+0x16c>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40020407 	.word	0x40020407
 80015cc:	bffdfff8 	.word	0xbffdfff8
 80015d0:	cccccccd 	.word	0xcccccccd
 80015d4:	40020000 	.word	0x40020000
 80015d8:	bffdfbf8 	.word	0xbffdfbf8
 80015dc:	40020400 	.word	0x40020400
 80015e0:	400200a8 	.word	0x400200a8
 80015e4:	400204a8 	.word	0x400204a8

080015e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_DMA_Start_IT+0x20>
 8001604:	2302      	movs	r3, #2
 8001606:	e04b      	b.n	80016a0 <HAL_DMA_Start_IT+0xb8>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d13a      	bne.n	8001692 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 f8e0 	bl	8001806 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	2b00      	cmp	r3, #0
 800164c:	d008      	beq.n	8001660 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 020e 	orr.w	r2, r2, #14
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e00f      	b.n	8001680 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0204 	bic.w	r2, r2, #4
 800166e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 020a 	orr.w	r2, r2, #10
 800167e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e005      	b.n	800169e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800169a:	2302      	movs	r3, #2
 800169c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800169e:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c4:	f003 031c 	and.w	r3, r3, #28
 80016c8:	2204      	movs	r2, #4
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d026      	beq.n	8001722 <HAL_DMA_IRQHandler+0x7a>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d021      	beq.n	8001722 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0204 	bic.w	r2, r2, #4
 80016fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001700:	f003 021c 	and.w	r2, r3, #28
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	2104      	movs	r1, #4
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001714:	2b00      	cmp	r3, #0
 8001716:	d071      	beq.n	80017fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001720:	e06c      	b.n	80017fc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	f003 031c 	and.w	r3, r3, #28
 800172a:	2202      	movs	r2, #2
 800172c:	409a      	lsls	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d02e      	beq.n	8001794 <HAL_DMA_IRQHandler+0xec>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d029      	beq.n	8001794 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10b      	bne.n	8001766 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 020a 	bic.w	r2, r2, #10
 800175c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	f003 021c 	and.w	r2, r3, #28
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	2102      	movs	r1, #2
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001786:	2b00      	cmp	r3, #0
 8001788:	d038      	beq.n	80017fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001792:	e033      	b.n	80017fc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001798:	f003 031c 	and.w	r3, r3, #28
 800179c:	2208      	movs	r2, #8
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d02a      	beq.n	80017fe <HAL_DMA_IRQHandler+0x156>
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d025      	beq.n	80017fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 020e 	bic.w	r2, r2, #14
 80017c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f003 021c 	and.w	r2, r3, #28
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	2101      	movs	r1, #1
 80017d0:	fa01 f202 	lsl.w	r2, r1, r2
 80017d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d004      	beq.n	80017fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
}
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001818:	f003 021c 	and.w	r2, r3, #28
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	2101      	movs	r1, #1
 8001822:	fa01 f202 	lsl.w	r2, r1, r2
 8001826:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b10      	cmp	r3, #16
 8001836:	d108      	bne.n	800184a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001848:	e007      	b.n	800185a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	60da      	str	r2, [r3, #12]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e17f      	b.n	8001b78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8171 	beq.w	8001b72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d005      	beq.n	80018a8 <HAL_GPIO_Init+0x40>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d130      	bne.n	800190a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018de:	2201      	movs	r2, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	f003 0201 	and.w	r2, r3, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b03      	cmp	r3, #3
 8001914:	d118      	bne.n	8001948 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	08db      	lsrs	r3, r3, #3
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	6939      	ldr	r1, [r7, #16]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80ac 	beq.w	8001b72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001b98 <HAL_GPIO_Init+0x330>)
 8001a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8001b98 <HAL_GPIO_Init+0x330>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a26:	4b5c      	ldr	r3, [pc, #368]	@ (8001b98 <HAL_GPIO_Init+0x330>)
 8001a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a32:	4a5a      	ldr	r2, [pc, #360]	@ (8001b9c <HAL_GPIO_Init+0x334>)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a5c:	d025      	beq.n	8001aaa <HAL_GPIO_Init+0x242>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba0 <HAL_GPIO_Init+0x338>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01f      	beq.n	8001aa6 <HAL_GPIO_Init+0x23e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4e      	ldr	r2, [pc, #312]	@ (8001ba4 <HAL_GPIO_Init+0x33c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d019      	beq.n	8001aa2 <HAL_GPIO_Init+0x23a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba8 <HAL_GPIO_Init+0x340>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0x236>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4c      	ldr	r2, [pc, #304]	@ (8001bac <HAL_GPIO_Init+0x344>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00d      	beq.n	8001a9a <HAL_GPIO_Init+0x232>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb0 <HAL_GPIO_Init+0x348>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d007      	beq.n	8001a96 <HAL_GPIO_Init+0x22e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4a      	ldr	r2, [pc, #296]	@ (8001bb4 <HAL_GPIO_Init+0x34c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_GPIO_Init+0x22a>
 8001a8e:	2306      	movs	r3, #6
 8001a90:	e00c      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e00a      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x244>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001abc:	4937      	ldr	r1, [pc, #220]	@ (8001b9c <HAL_GPIO_Init+0x334>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aca:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <HAL_GPIO_Init+0x350>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aee:	4a32      	ldr	r2, [pc, #200]	@ (8001bb8 <HAL_GPIO_Init+0x350>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001af4:	4b30      	ldr	r3, [pc, #192]	@ (8001bb8 <HAL_GPIO_Init+0x350>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b18:	4a27      	ldr	r2, [pc, #156]	@ (8001bb8 <HAL_GPIO_Init+0x350>)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <HAL_GPIO_Init+0x350>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b42:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb8 <HAL_GPIO_Init+0x350>)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_GPIO_Init+0x350>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b6c:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <HAL_GPIO_Init+0x350>)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f47f ae78 	bne.w	8001878 <HAL_GPIO_Init+0x10>
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	48000400 	.word	0x48000400
 8001ba4:	48000800 	.word	0x48000800
 8001ba8:	48000c00 	.word	0x48000c00
 8001bac:	48001000 	.word	0x48001000
 8001bb0:	48001400 	.word	0x48001400
 8001bb4:	48001800 	.word	0x48001800
 8001bb8:	40010400 	.word	0x40010400

08001bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e001      	b.n	8001bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c20:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40007000 	.word	0x40007000

08001c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c46:	d130      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c48:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c54:	d038      	beq.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c56:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2232      	movs	r2, #50	@ 0x32
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0c9b      	lsrs	r3, r3, #18
 8001c78:	3301      	adds	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c7c:	e002      	b.n	8001c84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c84:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c90:	d102      	bne.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f2      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ca4:	d110      	bne.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e00f      	b.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001caa:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cb6:	d007      	beq.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cc0:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	431bde83 	.word	0x431bde83

08001ce4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e3ca      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf6:	4b97      	ldr	r3, [pc, #604]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d00:	4b94      	ldr	r3, [pc, #592]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80e4 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_RCC_OscConfig+0x4a>
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	f040 808b 	bne.w	8001e3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	f040 8087 	bne.w	8001e3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d2e:	4b89      	ldr	r3, [pc, #548]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x62>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e3a2      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	4b82      	ldr	r3, [pc, #520]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_RCC_OscConfig+0x7c>
 8001d56:	4b7f      	ldr	r3, [pc, #508]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d5e:	e005      	b.n	8001d6c <HAL_RCC_OscConfig+0x88>
 8001d60:	4b7c      	ldr	r3, [pc, #496]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d223      	bcs.n	8001db8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fd1d 	bl	80027b4 <RCC_SetFlashLatencyFromMSIRange>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e383      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d84:	4b73      	ldr	r3, [pc, #460]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a72      	ldr	r2, [pc, #456]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	f043 0308 	orr.w	r3, r3, #8
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b70      	ldr	r3, [pc, #448]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	496d      	ldr	r1, [pc, #436]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da2:	4b6c      	ldr	r3, [pc, #432]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	4968      	ldr	r1, [pc, #416]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
 8001db6:	e025      	b.n	8001e04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db8:	4b66      	ldr	r3, [pc, #408]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a65      	ldr	r2, [pc, #404]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b63      	ldr	r3, [pc, #396]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4960      	ldr	r1, [pc, #384]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	495b      	ldr	r1, [pc, #364]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fcdd 	bl	80027b4 <RCC_SetFlashLatencyFromMSIRange>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e343      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e04:	f000 fc4a 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b52      	ldr	r3, [pc, #328]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	091b      	lsrs	r3, r3, #4
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	4950      	ldr	r1, [pc, #320]	@ (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e20:	4a4e      	ldr	r2, [pc, #312]	@ (8001f5c <HAL_RCC_OscConfig+0x278>)
 8001e22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e24:	4b4e      	ldr	r3, [pc, #312]	@ (8001f60 <HAL_RCC_OscConfig+0x27c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fe7b 	bl	8000b24 <HAL_InitTick>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d052      	beq.n	8001ede <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	e327      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d032      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e44:	4b43      	ldr	r3, [pc, #268]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a42      	ldr	r2, [pc, #264]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e50:	f7fe feb8 	bl	8000bc4 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e58:	f7fe feb4 	bl	8000bc4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e310      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e76:	4b37      	ldr	r3, [pc, #220]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a36      	ldr	r2, [pc, #216]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4931      	ldr	r1, [pc, #196]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e94:	4b2f      	ldr	r3, [pc, #188]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	492c      	ldr	r1, [pc, #176]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
 8001ea8:	e01a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a29      	ldr	r2, [pc, #164]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb6:	f7fe fe85 	bl	8000bc4 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ebe:	f7fe fe81 	bl	8000bc4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e2dd      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ed0:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x1da>
 8001edc:	e000      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ede:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d074      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x21a>
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	d10e      	bne.n	8001f16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d064      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d160      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e2ba      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x24a>
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0b      	ldr	r2, [pc, #44]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e026      	b.n	8001f7c <HAL_RCC_OscConfig+0x298>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f36:	d115      	bne.n	8001f64 <HAL_RCC_OscConfig+0x280>
 8001f38:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a05      	ldr	r2, [pc, #20]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b03      	ldr	r3, [pc, #12]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a02      	ldr	r2, [pc, #8]	@ (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e014      	b.n	8001f7c <HAL_RCC_OscConfig+0x298>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08003c08 	.word	0x08003c08
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004
 8001f64:	4ba0      	ldr	r3, [pc, #640]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a9f      	ldr	r2, [pc, #636]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b9d      	ldr	r3, [pc, #628]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a9c      	ldr	r2, [pc, #624]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe fe1e 	bl	8000bc4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7fe fe1a 	bl	8000bc4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	@ 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e276      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9e:	4b92      	ldr	r3, [pc, #584]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x2a8>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7fe fe0a 	bl	8000bc4 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7fe fe06 	bl	8000bc4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	@ 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e262      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fc6:	4b88      	ldr	r3, [pc, #544]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x2d0>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d060      	beq.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x310>
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d119      	bne.n	8002022 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d116      	bne.n	8002022 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff4:	4b7c      	ldr	r3, [pc, #496]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_OscConfig+0x328>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e23f      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200c:	4b76      	ldr	r3, [pc, #472]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	4973      	ldr	r1, [pc, #460]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002020:	e040      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d023      	beq.n	8002072 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202a:	4b6f      	ldr	r3, [pc, #444]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6e      	ldr	r2, [pc, #440]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7fe fdc5 	bl	8000bc4 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203e:	f7fe fdc1 	bl	8000bc4 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e21d      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002050:	4b65      	ldr	r3, [pc, #404]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b62      	ldr	r3, [pc, #392]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	495f      	ldr	r1, [pc, #380]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
 8002070:	e018      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b5d      	ldr	r3, [pc, #372]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a5c      	ldr	r2, [pc, #368]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8002078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800207c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe fda1 	bl	8000bc4 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002086:	f7fe fd9d 	bl	8000bc4 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1f9      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002098:	4b53      	ldr	r3, [pc, #332]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b8:	4b4b      	ldr	r3, [pc, #300]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80020ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020be:	4a4a      	ldr	r2, [pc, #296]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe fd7c 	bl	8000bc4 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7fe fd78 	bl	8000bc4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1d4      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e2:	4b41      	ldr	r3, [pc, #260]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x3ec>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f2:	4b3d      	ldr	r3, [pc, #244]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80020f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020f8:	4a3b      	ldr	r2, [pc, #236]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe fd5f 	bl	8000bc4 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210a:	f7fe fd5b 	bl	8000bc4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1b7      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800211c:	4b32      	ldr	r3, [pc, #200]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80a6 	beq.w	8002284 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800213c:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002148:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214c:	4a26      	ldr	r2, [pc, #152]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 800214e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002152:	6593      	str	r3, [r2, #88]	@ 0x58
 8002154:	4b24      	ldr	r3, [pc, #144]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002160:	2301      	movs	r3, #1
 8002162:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002164:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <HAL_RCC_OscConfig+0x508>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d118      	bne.n	80021a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002170:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <HAL_RCC_OscConfig+0x508>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <HAL_RCC_OscConfig+0x508>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217c:	f7fe fd22 	bl	8000bc4 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7fe fd1e 	bl	8000bc4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e17a      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <HAL_RCC_OscConfig+0x508>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d108      	bne.n	80021bc <HAL_RCC_OscConfig+0x4d8>
 80021aa:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b0:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ba:	e029      	b.n	8002210 <HAL_RCC_OscConfig+0x52c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d115      	bne.n	80021f0 <HAL_RCC_OscConfig+0x50c>
 80021c4:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	4a07      	ldr	r2, [pc, #28]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021da:	4a03      	ldr	r2, [pc, #12]	@ (80021e8 <HAL_RCC_OscConfig+0x504>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0x52c>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f6:	4a9b      	ldr	r2, [pc, #620]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002200:	4b98      	ldr	r3, [pc, #608]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002206:	4a97      	ldr	r2, [pc, #604]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d016      	beq.n	8002246 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7fe fcd4 	bl	8000bc4 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe fcd0 	bl	8000bc4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e12a      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002236:	4b8b      	ldr	r3, [pc, #556]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ed      	beq.n	8002220 <HAL_RCC_OscConfig+0x53c>
 8002244:	e015      	b.n	8002272 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002246:	f7fe fcbd 	bl	8000bc4 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe fcb9 	bl	8000bc4 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e113      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002264:	4b7f      	ldr	r3, [pc, #508]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ed      	bne.n	800224e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002272:	7ffb      	ldrb	r3, [r7, #31]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d105      	bne.n	8002284 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002278:	4b7a      	ldr	r3, [pc, #488]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227c:	4a79      	ldr	r2, [pc, #484]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 800227e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002282:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80fe 	beq.w	800248a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002292:	2b02      	cmp	r3, #2
 8002294:	f040 80d0 	bne.w	8002438 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002298:	4b72      	ldr	r3, [pc, #456]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d130      	bne.n	800230e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	3b01      	subs	r3, #1
 80022b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d127      	bne.n	800230e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d11f      	bne.n	800230e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022d8:	2a07      	cmp	r2, #7
 80022da:	bf14      	ite	ne
 80022dc:	2201      	movne	r2, #1
 80022de:	2200      	moveq	r2, #0
 80022e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d113      	bne.n	800230e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	3b01      	subs	r3, #1
 80022f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d109      	bne.n	800230e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d06e      	beq.n	80023ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b0c      	cmp	r3, #12
 8002312:	d069      	beq.n	80023e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002314:	4b53      	ldr	r3, [pc, #332]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002320:	4b50      	ldr	r3, [pc, #320]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0ad      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002330:	4b4c      	ldr	r3, [pc, #304]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a4b      	ldr	r2, [pc, #300]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800233a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800233c:	f7fe fc42 	bl	8000bc4 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe fc3e 	bl	8000bc4 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e09a      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002356:	4b43      	ldr	r3, [pc, #268]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002362:	4b40      	ldr	r3, [pc, #256]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	4b40      	ldr	r3, [pc, #256]	@ (8002468 <HAL_RCC_OscConfig+0x784>)
 8002368:	4013      	ands	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002372:	3a01      	subs	r2, #1
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800237c:	0212      	lsls	r2, r2, #8
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002384:	0852      	lsrs	r2, r2, #1
 8002386:	3a01      	subs	r2, #1
 8002388:	0552      	lsls	r2, r2, #21
 800238a:	4311      	orrs	r1, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002390:	0852      	lsrs	r2, r2, #1
 8002392:	3a01      	subs	r2, #1
 8002394:	0652      	lsls	r2, r2, #25
 8002396:	4311      	orrs	r1, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800239c:	0912      	lsrs	r2, r2, #4
 800239e:	0452      	lsls	r2, r2, #17
 80023a0:	430a      	orrs	r2, r1
 80023a2:	4930      	ldr	r1, [pc, #192]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c0:	f7fe fc00 	bl	8000bc4 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fbfc 	bl	8000bc4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e058      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e6:	e050      	b.n	800248a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e04f      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d148      	bne.n	800248a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a19      	ldr	r2, [pc, #100]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002404:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a16      	ldr	r2, [pc, #88]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800240e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002410:	f7fe fbd8 	bl	8000bc4 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fbd4 	bl	8000bc4 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e030      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x734>
 8002436:	e028      	b.n	800248a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d023      	beq.n	8002486 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a08      	ldr	r2, [pc, #32]	@ (8002464 <HAL_RCC_OscConfig+0x780>)
 8002444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fbbb 	bl	8000bc4 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002450:	e00c      	b.n	800246c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fbb7 	bl	8000bc4 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d905      	bls.n	800246c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e013      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
 8002464:	40021000 	.word	0x40021000
 8002468:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246c:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <HAL_RCC_OscConfig+0x7b0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ec      	bne.n	8002452 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_RCC_OscConfig+0x7b0>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	4905      	ldr	r1, [pc, #20]	@ (8002494 <HAL_RCC_OscConfig+0x7b0>)
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_OscConfig+0x7b4>)
 8002480:	4013      	ands	r3, r2
 8002482:	60cb      	str	r3, [r1, #12]
 8002484:	e001      	b.n	800248a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	feeefffc 	.word	0xfeeefffc

0800249c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0e7      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b75      	ldr	r3, [pc, #468]	@ (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d910      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b72      	ldr	r3, [pc, #456]	@ (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0207 	bic.w	r2, r3, #7
 80024c6:	4970      	ldr	r1, [pc, #448]	@ (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0cf      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d010      	beq.n	800250e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4b66      	ldr	r3, [pc, #408]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d908      	bls.n	800250e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b63      	ldr	r3, [pc, #396]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4960      	ldr	r1, [pc, #384]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d04c      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002522:	4b5a      	ldr	r3, [pc, #360]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d121      	bne.n	8002572 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0a6      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253a:	4b54      	ldr	r3, [pc, #336]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d115      	bne.n	8002572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e09a      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002552:	4b4e      	ldr	r3, [pc, #312]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e08e      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002562:	4b4a      	ldr	r3, [pc, #296]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e086      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b46      	ldr	r3, [pc, #280]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4943      	ldr	r1, [pc, #268]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002584:	f7fe fb1e 	bl	8000bc4 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fb1a 	bl	8000bc4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e06e      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b3a      	ldr	r3, [pc, #232]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	4b31      	ldr	r3, [pc, #196]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d208      	bcs.n	80025e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b2e      	ldr	r3, [pc, #184]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	492b      	ldr	r1, [pc, #172]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e2:	4b29      	ldr	r3, [pc, #164]	@ (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d210      	bcs.n	8002612 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f0:	4b25      	ldr	r3, [pc, #148]	@ (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 0207 	bic.w	r2, r3, #7
 80025f8:	4923      	ldr	r1, [pc, #140]	@ (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002600:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <HAL_RCC_ClockConfig+0x1ec>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e036      	b.n	8002680 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261e:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4918      	ldr	r1, [pc, #96]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4910      	ldr	r1, [pc, #64]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002650:	f000 f824 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	490b      	ldr	r1, [pc, #44]	@ (8002690 <HAL_RCC_ClockConfig+0x1f4>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
 800266c:	4a09      	ldr	r2, [pc, #36]	@ (8002694 <HAL_RCC_ClockConfig+0x1f8>)
 800266e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_RCC_ClockConfig+0x1fc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fa55 	bl	8000b24 <HAL_InitTick>
 800267a:	4603      	mov	r3, r0
 800267c:	72fb      	strb	r3, [r7, #11]

  return status;
 800267e:	7afb      	ldrb	r3, [r7, #11]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40022000 	.word	0x40022000
 800268c:	40021000 	.word	0x40021000
 8002690:	08003c08 	.word	0x08003c08
 8002694:	20000000 	.word	0x20000000
 8002698:	20000004 	.word	0x20000004

0800269c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	@ 0x24
 80026a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026aa:	4b3e      	ldr	r3, [pc, #248]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b4:	4b3b      	ldr	r3, [pc, #236]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x34>
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d121      	bne.n	800270e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d11e      	bne.n	800270e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026d0:	4b34      	ldr	r3, [pc, #208]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026dc:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e005      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026ec:	4b2d      	ldr	r3, [pc, #180]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026f8:	4a2b      	ldr	r2, [pc, #172]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10d      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b04      	cmp	r3, #4
 8002712:	d102      	bne.n	800271a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002714:	4b25      	ldr	r3, [pc, #148]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	e004      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d101      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002720:	4b23      	ldr	r3, [pc, #140]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002722:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d134      	bne.n	8002794 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800272a:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d003      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0xa6>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d003      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0xac>
 8002740:	e005      	b.n	800274e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002742:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002744:	617b      	str	r3, [r7, #20]
      break;
 8002746:	e005      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002748:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800274a:	617b      	str	r3, [r7, #20]
      break;
 800274c:	e002      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	617b      	str	r3, [r7, #20]
      break;
 8002752:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002754:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	3301      	adds	r3, #1
 8002760:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	fb03 f202 	mul.w	r2, r3, r2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800277a:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	0e5b      	lsrs	r3, r3, #25
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	3301      	adds	r3, #1
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002794:	69bb      	ldr	r3, [r7, #24]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	@ 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08003c18 	.word	0x08003c18
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	007a1200 	.word	0x007a1200

080027b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027c0:	4b2a      	ldr	r3, [pc, #168]	@ (800286c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027cc:	f7ff fa26 	bl	8001c1c <HAL_PWREx_GetVoltageRange>
 80027d0:	6178      	str	r0, [r7, #20]
 80027d2:	e014      	b.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	4b25      	ldr	r3, [pc, #148]	@ (800286c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d8:	4a24      	ldr	r2, [pc, #144]	@ (800286c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027de:	6593      	str	r3, [r2, #88]	@ 0x58
 80027e0:	4b22      	ldr	r3, [pc, #136]	@ (800286c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027ec:	f7ff fa16 	bl	8001c1c <HAL_PWREx_GetVoltageRange>
 80027f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002804:	d10b      	bne.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b80      	cmp	r3, #128	@ 0x80
 800280a:	d919      	bls.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002810:	d902      	bls.n	8002818 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002812:	2302      	movs	r3, #2
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	e013      	b.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002818:	2301      	movs	r3, #1
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	e010      	b.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b80      	cmp	r3, #128	@ 0x80
 8002822:	d902      	bls.n	800282a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002824:	2303      	movs	r3, #3
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	e00a      	b.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b80      	cmp	r3, #128	@ 0x80
 800282e:	d102      	bne.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002830:	2302      	movs	r3, #2
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e004      	b.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b70      	cmp	r3, #112	@ 0x70
 800283a:	d101      	bne.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800283c:	2301      	movs	r3, #1
 800283e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002840:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 0207 	bic.w	r2, r3, #7
 8002848:	4909      	ldr	r1, [pc, #36]	@ (8002870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002850:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	429a      	cmp	r2, r3
 800285c:	d001      	beq.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	40022000 	.word	0x40022000

08002874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800287c:	2300      	movs	r3, #0
 800287e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002880:	2300      	movs	r3, #0
 8002882:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800288c:	2b00      	cmp	r3, #0
 800288e:	d041      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002894:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002898:	d02a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800289a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800289e:	d824      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028a4:	d008      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028aa:	d81e      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b4:	d010      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028b6:	e018      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b8:	4b86      	ldr	r3, [pc, #536]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4a85      	ldr	r2, [pc, #532]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028c4:	e015      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fabb 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d6:	e00c      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3320      	adds	r3, #32
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fba6 	bl	8003030 <RCCEx_PLLSAI2_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e8:	e003      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	74fb      	strb	r3, [r7, #19]
      break;
 80028ee:	e000      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f2:	7cfb      	ldrb	r3, [r7, #19]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f8:	4b76      	ldr	r3, [pc, #472]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002906:	4973      	ldr	r1, [pc, #460]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800290e:	e001      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d041      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002924:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002928:	d02a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800292a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800292e:	d824      	bhi.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002934:	d008      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800293a:	d81e      	bhi.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002940:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002944:	d010      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002946:	e018      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002948:	4b62      	ldr	r3, [pc, #392]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a61      	ldr	r2, [pc, #388]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002952:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002954:	e015      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fa73 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 8002962:	4603      	mov	r3, r0
 8002964:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002966:	e00c      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3320      	adds	r3, #32
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fb5e 	bl	8003030 <RCCEx_PLLSAI2_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002978:	e003      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	74fb      	strb	r3, [r7, #19]
      break;
 800297e:	e000      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002988:	4b52      	ldr	r3, [pc, #328]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002996:	494f      	ldr	r1, [pc, #316]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800299e:	e001      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80a0 	beq.w	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029b6:	4b47      	ldr	r3, [pc, #284]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029c6:	2300      	movs	r3, #0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029cc:	4b41      	ldr	r3, [pc, #260]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d0:	4a40      	ldr	r2, [pc, #256]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e4:	2301      	movs	r3, #1
 80029e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a3a      	ldr	r2, [pc, #232]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f4:	f7fe f8e6 	bl	8000bc4 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029fa:	e009      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe f8e2 	bl	8000bc4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d902      	bls.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a0e:	e005      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a10:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ef      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d15c      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a22:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01f      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d019      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a40:	4b24      	ldr	r3, [pc, #144]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a52:	4a20      	ldr	r2, [pc, #128]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a62:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a6c:	4a19      	ldr	r2, [pc, #100]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe f8a1 	bl	8000bc4 <HAL_GetTick>
 8002a82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a84:	e00b      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe f89d 	bl	8000bc4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d902      	bls.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	74fb      	strb	r3, [r7, #19]
            break;
 8002a9c:	e006      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ec      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab2:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ac2:	4904      	ldr	r1, [pc, #16]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002aca:	e009      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	74bb      	strb	r3, [r7, #18]
 8002ad0:	e006      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae0:	7c7b      	ldrb	r3, [r7, #17]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d105      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	4a9d      	ldr	r2, [pc, #628]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002afe:	4b98      	ldr	r3, [pc, #608]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b04:	f023 0203 	bic.w	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0c:	4994      	ldr	r1, [pc, #592]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b20:	4b8f      	ldr	r3, [pc, #572]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b26:	f023 020c 	bic.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2e:	498c      	ldr	r1, [pc, #560]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b42:	4b87      	ldr	r3, [pc, #540]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	4983      	ldr	r1, [pc, #524]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b64:	4b7e      	ldr	r3, [pc, #504]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	497b      	ldr	r1, [pc, #492]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b86:	4b76      	ldr	r3, [pc, #472]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b94:	4972      	ldr	r1, [pc, #456]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ba8:	4b6d      	ldr	r3, [pc, #436]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb6:	496a      	ldr	r1, [pc, #424]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bca:	4b65      	ldr	r3, [pc, #404]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd8:	4961      	ldr	r1, [pc, #388]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bec:	4b5c      	ldr	r3, [pc, #368]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfa:	4959      	ldr	r1, [pc, #356]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c0e:	4b54      	ldr	r3, [pc, #336]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c14:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c1c:	4950      	ldr	r1, [pc, #320]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c30:	4b4b      	ldr	r3, [pc, #300]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3e:	4948      	ldr	r1, [pc, #288]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c52:	4b43      	ldr	r3, [pc, #268]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c60:	493f      	ldr	r1, [pc, #252]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d028      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c74:	4b3a      	ldr	r3, [pc, #232]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c82:	4937      	ldr	r1, [pc, #220]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c94:	4b32      	ldr	r3, [pc, #200]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a31      	ldr	r2, [pc, #196]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c9e:	60d3      	str	r3, [r2, #12]
 8002ca0:	e011      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002caa:	d10c      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f8c8 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d028      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cd2:	4b23      	ldr	r3, [pc, #140]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	491f      	ldr	r1, [pc, #124]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cfc:	60d3      	str	r3, [r2, #12]
 8002cfe:	e011      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2101      	movs	r1, #1
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f899 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02b      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3e:	4908      	ldr	r1, [pc, #32]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d4e:	d109      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a02      	ldr	r2, [pc, #8]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	60d3      	str	r3, [r2, #12]
 8002d5c:	e014      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2101      	movs	r1, #1
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 f867 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d02f      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d94:	4b2b      	ldr	r3, [pc, #172]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002da2:	4928      	ldr	r1, [pc, #160]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002db2:	d10d      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	2102      	movs	r1, #2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f844 	bl	8002e48 <RCCEx_PLLSAI1_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d014      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	74bb      	strb	r3, [r7, #18]
 8002dce:	e011      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3320      	adds	r3, #32
 8002dde:	2102      	movs	r1, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f925 	bl	8003030 <RCCEx_PLLSAI2_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e00:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e06:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e0e:	490d      	ldr	r1, [pc, #52]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e22:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e32:	4904      	ldr	r1, [pc, #16]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000

08002e48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e56:	4b75      	ldr	r3, [pc, #468]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d018      	beq.n	8002e94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e62:	4b72      	ldr	r3, [pc, #456]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0203 	and.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d10d      	bne.n	8002e8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
       ||
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e7a:	4b6c      	ldr	r3, [pc, #432]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
       ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d047      	beq.n	8002f1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	e044      	b.n	8002f1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d018      	beq.n	8002ece <RCCEx_PLLSAI1_Config+0x86>
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d825      	bhi.n	8002eec <RCCEx_PLLSAI1_Config+0xa4>
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d002      	beq.n	8002eaa <RCCEx_PLLSAI1_Config+0x62>
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d009      	beq.n	8002ebc <RCCEx_PLLSAI1_Config+0x74>
 8002ea8:	e020      	b.n	8002eec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eaa:	4b60      	ldr	r3, [pc, #384]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11d      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eba:	e01a      	b.n	8002ef2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d116      	bne.n	8002ef6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ecc:	e013      	b.n	8002ef6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ece:	4b57      	ldr	r3, [pc, #348]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eda:	4b54      	ldr	r3, [pc, #336]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eea:	e006      	b.n	8002efa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef0:	e004      	b.n	8002efc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e002      	b.n	8002efc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e000      	b.n	8002efc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002efa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10d      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f02:	4b4a      	ldr	r3, [pc, #296]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	430b      	orrs	r3, r1
 8002f18:	4944      	ldr	r1, [pc, #272]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d17d      	bne.n	8003020 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f24:	4b41      	ldr	r3, [pc, #260]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a40      	ldr	r2, [pc, #256]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fd fe48 	bl	8000bc4 <HAL_GetTick>
 8002f34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f36:	e009      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f38:	f7fd fe44 	bl	8000bc4 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d902      	bls.n	8002f4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	73fb      	strb	r3, [r7, #15]
        break;
 8002f4a:	e005      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f4c:	4b37      	ldr	r3, [pc, #220]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ef      	bne.n	8002f38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d160      	bne.n	8003020 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d111      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f64:	4b31      	ldr	r3, [pc, #196]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6892      	ldr	r2, [r2, #8]
 8002f74:	0211      	lsls	r1, r2, #8
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68d2      	ldr	r2, [r2, #12]
 8002f7a:	0912      	lsrs	r2, r2, #4
 8002f7c:	0452      	lsls	r2, r2, #17
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	492a      	ldr	r1, [pc, #168]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	610b      	str	r3, [r1, #16]
 8002f86:	e027      	b.n	8002fd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d112      	bne.n	8002fb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f8e:	4b27      	ldr	r3, [pc, #156]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f96:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6892      	ldr	r2, [r2, #8]
 8002f9e:	0211      	lsls	r1, r2, #8
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6912      	ldr	r2, [r2, #16]
 8002fa4:	0852      	lsrs	r2, r2, #1
 8002fa6:	3a01      	subs	r2, #1
 8002fa8:	0552      	lsls	r2, r2, #21
 8002faa:	430a      	orrs	r2, r1
 8002fac:	491f      	ldr	r1, [pc, #124]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	610b      	str	r3, [r1, #16]
 8002fb2:	e011      	b.n	8002fd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6892      	ldr	r2, [r2, #8]
 8002fc4:	0211      	lsls	r1, r2, #8
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6952      	ldr	r2, [r2, #20]
 8002fca:	0852      	lsrs	r2, r2, #1
 8002fcc:	3a01      	subs	r2, #1
 8002fce:	0652      	lsls	r2, r2, #25
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	4916      	ldr	r1, [pc, #88]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fd8:	4b14      	ldr	r3, [pc, #80]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a13      	ldr	r2, [pc, #76]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fd fdee 	bl	8000bc4 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fea:	e009      	b.n	8003000 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fec:	f7fd fdea 	bl	8000bc4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d902      	bls.n	8003000 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ffe:	e005      	b.n	800300c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003000:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ef      	beq.n	8002fec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003012:	4b06      	ldr	r3, [pc, #24]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	4904      	ldr	r1, [pc, #16]	@ (800302c <RCCEx_PLLSAI1_Config+0x1e4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000

08003030 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800303e:	4b6a      	ldr	r3, [pc, #424]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d018      	beq.n	800307c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800304a:	4b67      	ldr	r3, [pc, #412]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d10d      	bne.n	8003076 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
       ||
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003062:	4b61      	ldr	r3, [pc, #388]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
       ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d047      	beq.n	8003106 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e044      	b.n	8003106 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d018      	beq.n	80030b6 <RCCEx_PLLSAI2_Config+0x86>
 8003084:	2b03      	cmp	r3, #3
 8003086:	d825      	bhi.n	80030d4 <RCCEx_PLLSAI2_Config+0xa4>
 8003088:	2b01      	cmp	r3, #1
 800308a:	d002      	beq.n	8003092 <RCCEx_PLLSAI2_Config+0x62>
 800308c:	2b02      	cmp	r3, #2
 800308e:	d009      	beq.n	80030a4 <RCCEx_PLLSAI2_Config+0x74>
 8003090:	e020      	b.n	80030d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003092:	4b55      	ldr	r3, [pc, #340]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11d      	bne.n	80030da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a2:	e01a      	b.n	80030da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030a4:	4b50      	ldr	r3, [pc, #320]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d116      	bne.n	80030de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b4:	e013      	b.n	80030de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030b6:	4b4c      	ldr	r3, [pc, #304]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030c2:	4b49      	ldr	r3, [pc, #292]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030d2:	e006      	b.n	80030e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      break;
 80030d8:	e004      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030da:	bf00      	nop
 80030dc:	e002      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10d      	bne.n	8003106 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ea:	4b3f      	ldr	r3, [pc, #252]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	430b      	orrs	r3, r1
 8003100:	4939      	ldr	r1, [pc, #228]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d167      	bne.n	80031dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800310c:	4b36      	ldr	r3, [pc, #216]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a35      	ldr	r2, [pc, #212]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003118:	f7fd fd54 	bl	8000bc4 <HAL_GetTick>
 800311c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800311e:	e009      	b.n	8003134 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003120:	f7fd fd50 	bl	8000bc4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d902      	bls.n	8003134 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	73fb      	strb	r3, [r7, #15]
        break;
 8003132:	e005      	b.n	8003140 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003134:	4b2c      	ldr	r3, [pc, #176]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ef      	bne.n	8003120 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d14a      	bne.n	80031dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d111      	bne.n	8003170 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800314c:	4b26      	ldr	r3, [pc, #152]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6892      	ldr	r2, [r2, #8]
 800315c:	0211      	lsls	r1, r2, #8
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68d2      	ldr	r2, [r2, #12]
 8003162:	0912      	lsrs	r2, r2, #4
 8003164:	0452      	lsls	r2, r2, #17
 8003166:	430a      	orrs	r2, r1
 8003168:	491f      	ldr	r1, [pc, #124]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	614b      	str	r3, [r1, #20]
 800316e:	e011      	b.n	8003194 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003170:	4b1d      	ldr	r3, [pc, #116]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003178:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6892      	ldr	r2, [r2, #8]
 8003180:	0211      	lsls	r1, r2, #8
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6912      	ldr	r2, [r2, #16]
 8003186:	0852      	lsrs	r2, r2, #1
 8003188:	3a01      	subs	r2, #1
 800318a:	0652      	lsls	r2, r2, #25
 800318c:	430a      	orrs	r2, r1
 800318e:	4916      	ldr	r1, [pc, #88]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003190:	4313      	orrs	r3, r2
 8003192:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003194:	4b14      	ldr	r3, [pc, #80]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a13      	ldr	r2, [pc, #76]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fd fd10 	bl	8000bc4 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031a6:	e009      	b.n	80031bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031a8:	f7fd fd0c 	bl	8000bc4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d902      	bls.n	80031bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	73fb      	strb	r3, [r7, #15]
          break;
 80031ba:	e005      	b.n	80031c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031bc:	4b0a      	ldr	r3, [pc, #40]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ef      	beq.n	80031a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031ce:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	4904      	ldr	r1, [pc, #16]	@ (80031e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000

080031ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e049      	b.n	8003292 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fd fbc8 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f000 face 	bl	80037cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d001      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e04f      	b.n	8003354 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a23      	ldr	r2, [pc, #140]	@ (8003360 <HAL_TIM_Base_Start_IT+0xc4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01d      	beq.n	8003312 <HAL_TIM_Base_Start_IT+0x76>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032de:	d018      	beq.n	8003312 <HAL_TIM_Base_Start_IT+0x76>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003364 <HAL_TIM_Base_Start_IT+0xc8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_TIM_Base_Start_IT+0x76>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003368 <HAL_TIM_Base_Start_IT+0xcc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_TIM_Base_Start_IT+0x76>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <HAL_TIM_Base_Start_IT+0xd0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_TIM_Base_Start_IT+0x76>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1b      	ldr	r2, [pc, #108]	@ (8003370 <HAL_TIM_Base_Start_IT+0xd4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_TIM_Base_Start_IT+0x76>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a19      	ldr	r2, [pc, #100]	@ (8003374 <HAL_TIM_Base_Start_IT+0xd8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d115      	bne.n	800333e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	4b17      	ldr	r3, [pc, #92]	@ (8003378 <HAL_TIM_Base_Start_IT+0xdc>)
 800331a:	4013      	ands	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b06      	cmp	r3, #6
 8003322:	d015      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0xb4>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332a:	d011      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333c:	e008      	b.n	8003350 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e000      	b.n	8003352 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003350:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40013400 	.word	0x40013400
 8003374:	40014000 	.word	0x40014000
 8003378:	00010007 	.word	0x00010007

0800337c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10f      	bne.n	80033c4 <HAL_TIM_Base_Stop_IT+0x48>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6a1a      	ldr	r2, [r3, #32]
 80033aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <HAL_TIM_Base_Stop_IT+0x48>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01b      	beq.n	800343e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f06f 0202 	mvn.w	r2, #2
 800340e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f9b2 	bl	800378e <HAL_TIM_IC_CaptureCallback>
 800342a:	e005      	b.n	8003438 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f9a4 	bl	800377a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f9b5 	bl	80037a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d020      	beq.n	800348a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01b      	beq.n	800348a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f06f 0204 	mvn.w	r2, #4
 800345a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f98c 	bl	800378e <HAL_TIM_IC_CaptureCallback>
 8003476:	e005      	b.n	8003484 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f97e 	bl	800377a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f98f 	bl	80037a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d020      	beq.n	80034d6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01b      	beq.n	80034d6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f06f 0208 	mvn.w	r2, #8
 80034a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2204      	movs	r2, #4
 80034ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f966 	bl	800378e <HAL_TIM_IC_CaptureCallback>
 80034c2:	e005      	b.n	80034d0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f958 	bl	800377a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f969 	bl	80037a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01b      	beq.n	8003522 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f06f 0210 	mvn.w	r2, #16
 80034f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2208      	movs	r2, #8
 80034f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f940 	bl	800378e <HAL_TIM_IC_CaptureCallback>
 800350e:	e005      	b.n	800351c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f932 	bl	800377a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f943 	bl	80037a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00c      	beq.n	8003546 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f06f 0201 	mvn.w	r2, #1
 800353e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fd f8cf 	bl	80006e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354c:	2b00      	cmp	r3, #0
 800354e:	d104      	bne.n	800355a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00c      	beq.n	8003574 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fafe 	bl	8003b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00c      	beq.n	8003598 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 faf6 	bl	8003b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00c      	beq.n	80035bc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8fd 	bl	80037b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00c      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0220 	mvn.w	r2, #32
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fabe 	bl	8003b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_TIM_ConfigClockSource+0x1c>
 8003600:	2302      	movs	r3, #2
 8003602:	e0b6      	b.n	8003772 <HAL_TIM_ConfigClockSource+0x18a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003622:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800362e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003640:	d03e      	beq.n	80036c0 <HAL_TIM_ConfigClockSource+0xd8>
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003646:	f200 8087 	bhi.w	8003758 <HAL_TIM_ConfigClockSource+0x170>
 800364a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800364e:	f000 8086 	beq.w	800375e <HAL_TIM_ConfigClockSource+0x176>
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003656:	d87f      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x170>
 8003658:	2b70      	cmp	r3, #112	@ 0x70
 800365a:	d01a      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0xaa>
 800365c:	2b70      	cmp	r3, #112	@ 0x70
 800365e:	d87b      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x170>
 8003660:	2b60      	cmp	r3, #96	@ 0x60
 8003662:	d050      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x11e>
 8003664:	2b60      	cmp	r3, #96	@ 0x60
 8003666:	d877      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x170>
 8003668:	2b50      	cmp	r3, #80	@ 0x50
 800366a:	d03c      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0xfe>
 800366c:	2b50      	cmp	r3, #80	@ 0x50
 800366e:	d873      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x170>
 8003670:	2b40      	cmp	r3, #64	@ 0x40
 8003672:	d058      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x13e>
 8003674:	2b40      	cmp	r3, #64	@ 0x40
 8003676:	d86f      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x170>
 8003678:	2b30      	cmp	r3, #48	@ 0x30
 800367a:	d064      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x15e>
 800367c:	2b30      	cmp	r3, #48	@ 0x30
 800367e:	d86b      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x170>
 8003680:	2b20      	cmp	r3, #32
 8003682:	d060      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x15e>
 8003684:	2b20      	cmp	r3, #32
 8003686:	d867      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x170>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05c      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x15e>
 800368c:	2b10      	cmp	r3, #16
 800368e:	d05a      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x15e>
 8003690:	e062      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036a2:	f000 f9b3 	bl	8003a0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	609a      	str	r2, [r3, #8]
      break;
 80036be:	e04f      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036d0:	f000 f99c 	bl	8003a0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036e2:	609a      	str	r2, [r3, #8]
      break;
 80036e4:	e03c      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 f910 	bl	8003918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2150      	movs	r1, #80	@ 0x50
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f969 	bl	80039d6 <TIM_ITRx_SetConfig>
      break;
 8003704:	e02c      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003712:	461a      	mov	r2, r3
 8003714:	f000 f92f 	bl	8003976 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2160      	movs	r1, #96	@ 0x60
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f959 	bl	80039d6 <TIM_ITRx_SetConfig>
      break;
 8003724:	e01c      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003732:	461a      	mov	r2, r3
 8003734:	f000 f8f0 	bl	8003918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2140      	movs	r1, #64	@ 0x40
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f949 	bl	80039d6 <TIM_ITRx_SetConfig>
      break;
 8003744:	e00c      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f000 f940 	bl	80039d6 <TIM_ITRx_SetConfig>
      break;
 8003756:	e003      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      break;
 800375c:	e000      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800375e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a46      	ldr	r2, [pc, #280]	@ (80038f8 <TIM_Base_SetConfig+0x12c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ea:	d00f      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a43      	ldr	r2, [pc, #268]	@ (80038fc <TIM_Base_SetConfig+0x130>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00b      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a42      	ldr	r2, [pc, #264]	@ (8003900 <TIM_Base_SetConfig+0x134>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d007      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a41      	ldr	r2, [pc, #260]	@ (8003904 <TIM_Base_SetConfig+0x138>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a40      	ldr	r2, [pc, #256]	@ (8003908 <TIM_Base_SetConfig+0x13c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d108      	bne.n	800381e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a35      	ldr	r2, [pc, #212]	@ (80038f8 <TIM_Base_SetConfig+0x12c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01f      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382c:	d01b      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a32      	ldr	r2, [pc, #200]	@ (80038fc <TIM_Base_SetConfig+0x130>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d017      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a31      	ldr	r2, [pc, #196]	@ (8003900 <TIM_Base_SetConfig+0x134>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a30      	ldr	r2, [pc, #192]	@ (8003904 <TIM_Base_SetConfig+0x138>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2f      	ldr	r2, [pc, #188]	@ (8003908 <TIM_Base_SetConfig+0x13c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2e      	ldr	r2, [pc, #184]	@ (800390c <TIM_Base_SetConfig+0x140>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2d      	ldr	r2, [pc, #180]	@ (8003910 <TIM_Base_SetConfig+0x144>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_Base_SetConfig+0x9a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2c      	ldr	r2, [pc, #176]	@ (8003914 <TIM_Base_SetConfig+0x148>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800386c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a16      	ldr	r2, [pc, #88]	@ (80038f8 <TIM_Base_SetConfig+0x12c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00f      	beq.n	80038c4 <TIM_Base_SetConfig+0xf8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a18      	ldr	r2, [pc, #96]	@ (8003908 <TIM_Base_SetConfig+0x13c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <TIM_Base_SetConfig+0xf8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a17      	ldr	r2, [pc, #92]	@ (800390c <TIM_Base_SetConfig+0x140>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <TIM_Base_SetConfig+0xf8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a16      	ldr	r2, [pc, #88]	@ (8003910 <TIM_Base_SetConfig+0x144>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_Base_SetConfig+0xf8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <TIM_Base_SetConfig+0x148>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d103      	bne.n	80038cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d105      	bne.n	80038ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f023 0201 	bic.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]
  }
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800
 8003904:	40000c00 	.word	0x40000c00
 8003908:	40013400 	.word	0x40013400
 800390c:	40014000 	.word	0x40014000
 8003910:	40014400 	.word	0x40014400
 8003914:	40014800 	.word	0x40014800

08003918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f023 0201 	bic.w	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f023 030a 	bic.w	r3, r3, #10
 8003954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	621a      	str	r2, [r3, #32]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003976:	b480      	push	{r7}
 8003978:	b087      	sub	sp, #28
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f023 0210 	bic.w	r2, r3, #16
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	031b      	lsls	r3, r3, #12
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	621a      	str	r2, [r3, #32]
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f043 0307 	orr.w	r3, r3, #7
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	021a      	lsls	r2, r3, #8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	609a      	str	r2, [r3, #8]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e068      	b.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2e      	ldr	r2, [pc, #184]	@ (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2d      	ldr	r2, [pc, #180]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d108      	bne.n	8003aaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01d      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad6:	d018      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00e      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a18      	ldr	r2, [pc, #96]	@ (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d009      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a13      	ldr	r2, [pc, #76]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a14      	ldr	r2, [pc, #80]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10c      	bne.n	8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40013400 	.word	0x40013400
 8003b4c:	40000400 	.word	0x40000400
 8003b50:	40000800 	.word	0x40000800
 8003b54:	40000c00 	.word	0x40000c00
 8003b58:	40014000 	.word	0x40014000

08003b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <memset>:
 8003b98:	4402      	add	r2, r0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <__libc_init_array>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4d0d      	ldr	r5, [pc, #52]	@ (8003be0 <__libc_init_array+0x38>)
 8003bac:	4c0d      	ldr	r4, [pc, #52]	@ (8003be4 <__libc_init_array+0x3c>)
 8003bae:	1b64      	subs	r4, r4, r5
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	2600      	movs	r6, #0
 8003bb4:	42a6      	cmp	r6, r4
 8003bb6:	d109      	bne.n	8003bcc <__libc_init_array+0x24>
 8003bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8003be8 <__libc_init_array+0x40>)
 8003bba:	4c0c      	ldr	r4, [pc, #48]	@ (8003bec <__libc_init_array+0x44>)
 8003bbc:	f000 f818 	bl	8003bf0 <_init>
 8003bc0:	1b64      	subs	r4, r4, r5
 8003bc2:	10a4      	asrs	r4, r4, #2
 8003bc4:	2600      	movs	r6, #0
 8003bc6:	42a6      	cmp	r6, r4
 8003bc8:	d105      	bne.n	8003bd6 <__libc_init_array+0x2e>
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd0:	4798      	blx	r3
 8003bd2:	3601      	adds	r6, #1
 8003bd4:	e7ee      	b.n	8003bb4 <__libc_init_array+0xc>
 8003bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bda:	4798      	blx	r3
 8003bdc:	3601      	adds	r6, #1
 8003bde:	e7f2      	b.n	8003bc6 <__libc_init_array+0x1e>
 8003be0:	08003c48 	.word	0x08003c48
 8003be4:	08003c48 	.word	0x08003c48
 8003be8:	08003c48 	.word	0x08003c48
 8003bec:	08003c4c 	.word	0x08003c4c

08003bf0 <_init>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr

08003bfc <_fini>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr
